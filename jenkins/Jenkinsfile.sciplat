pipeline {
    agent {
      label 'CSC_Conda_Node'
    }

    triggers {
            cron(env.BRANCH_NAME == 'main' ? '0 4 * * *' : '')
    }

    environment {
        registryCredential = "dockerhub-lssttsadmin"
    }

    stages {
        stage("Copy credentials"){
          steps{
            withCredentials([file(credentialsId: 'yum-nexus-private', variable: 'yum_nexus_private')]) {
              sh "cp \$yum_nexus_private ${env.WORKSPACE}/build/common/"
            }
          }
        }
        stage("Build daily sal-sciplat licensed") {
          steps {
            withEnv(["HOME=${env.WORKSPACE}", "lsstsqre=d_latest", "stack=d_latest"]) {
              script {
                docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
                  sh """
                    docker compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build --pull opensplice-lsstsqre-licensed
                    docker compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build sal-sciplat-licensed
                  """
                }
              }
            }
          }
        }
        stage("Push daily sal-sciplat licensed") {
          steps {
            withEnv(["HOME=${env.WORKSPACE}", "lsstsqre=d_latest", "stack=d_latest"]) {
              script {
                retry(3) {
                  docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
                    sh """
                      docker compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml push sal-sciplat-licensed
                    """
                  }
                }
              }
            }
          }
        }
        stage("Build daily sal-sciplat community") {
          steps {
            withEnv(["HOME=${env.WORKSPACE}", "lsstsqre=d_latest", "stack=d_latest"]) {
              script {
                docker.withRegistry("", registryCredential) {
                  sh """
                    docker compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build --pull opensplice-lsstsqre-community
                    docker compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build sal-sciplat-community
                  """
                }
              }
            }
          }
        }
        stage("Push daily sal-sciplat community") {
          steps {
            withEnv(["HOME=${env.WORKSPACE}", "lsstsqre=d_latest", "stack=d_latest"]) {
              script {
                retry(3) {
                  docker.withRegistry("", registryCredential) {
                    sh """
                      docker compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml push sal-sciplat-community
                    """
                  }
                }
              }
            }
          }
        }
        stage("Build weekly sal-sciplat licensed") {
          steps {
            withEnv(["HOME=${env.WORKSPACE}", "lsstsqre=w_latest", "stack=w_latest"]) {
              script {
                docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
                  sh """
                    docker compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build --pull opensplice-lsstsqre-licensed
                    docker compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build sal-sciplat-licensed
                  """
                }
              }
            }
          }
        }
        stage("Push weekly sal-sciplat licensed") {
            steps {
              withEnv(["HOME=${env.WORKSPACE}", "lsstsqre=w_latest", "stack=w_latest"]) {
                script {
                  retry(3) {
                    docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
                      sh """
                          docker compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml push sal-sciplat-licensed
                      """
                    }
                  }
                }
              }
            }
        }
        stage("Build weekly sal-sciplat community") {
            steps {
              withEnv(["HOME=${env.WORKSPACE}", "lsstsqre=w_latest", "stack=w_latest"]) {
              script {
                docker.withRegistry("", registryCredential) {
                  sh """
                      docker compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build --pull opensplice-lsstsqre-community
                      docker compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build sal-sciplat-community
                  """
                }
              }
            }
          }
        }
        stage("Push weekly sal-sciplat community") {
            steps {
              withEnv(["HOME=${env.WORKSPACE}", "lsstsqre=w_latest", "stack=w_latest"]) {
              script {
                retry(3){
                  docker.withRegistry("", registryCredential) {
                    sh """
                        docker compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml push sal-sciplat-community
                    """
                  }
                }
              }
            }
          }
        }
        stage("Trigger lab build") {
          when {
              expression { env.BRANCH_NAME == 'main' }
          }
          steps {
              build job: 'SalSciplatLab/main', parameters: [booleanParam(name: 'build_sciplat_lab_recommended', value: false)], wait: false
          }
        }
    }
    post {
        always {
            step([$class: 'Mailer',
                notifyEveryUnstableBuild: false,
                recipients: "tribeiro@lsst.org", "mareuter@lsst.org",
                sendToIndividuals: true])
        }
        regression {
            script {
                def userId = "U72CH91L2"
                def userId_2 = "U2JPDUE86"
                slackSend(color: "danger", message: "<@$userId> <@$userId_2> ${JOB_NAME} has suffered a regression ${BUILD_URL}", channel: "#jenkins-builds, @$userId, @$userId_2")
            }

        }
        fixed {
            script {
                def userId = "U72CH91L2"
                def userId_2 = "U2JPDUE86"
                slackSend(color: "good", message: "<@$userId> <@$userId_2> ${JOB_NAME} has been fixed ${BUILD_URL}", channel: "#jenkins-builds, @$userId, @$userId_2")
            }
        }
    }
}
