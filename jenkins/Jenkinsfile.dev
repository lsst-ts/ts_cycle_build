pipeline {
    agent {
      docker {
        alwaysPull true
        label 'CSC_Conda_Node'
        image 'docker/compose:latest'
        args "--entrypoint='' --user root -v /var/run/docker.sock:/var/run/docker.sock -e DOCKER_HOST"
      }
    }
    environment {
        registryCredential = "dockerhub-lssttsadmin"
        build_network = "n_${BUILD_ID}_${JENKINS_NODE_COOKIE}"
    }
    parameters {
      booleanParam defaultValue: false, description: 'Build master branch for all repos. Ignores All version parameters.', name: 'build_master'
      booleanParam defaultValue: false, description: 'Build develop branch for all repos. Ignores All version parameters.', name: 'build_develop'
      booleanParam defaultValue: false, description: 'Build cycle.', name: 'build_cycle'
    }
    stages {
        stage("Create build network"){
          steps{
            script{
                sh """
                  docker network create \${build_network}
                """
            }
          }
        }
        stage("Build/push master - community") {
          when {
              expression { return params.build_master }
          }
            steps {
              withEnv(["HOME=${env.WORKSPACE}"]) {
                script {
                  docker.withRegistry("", registryCredential) {
                    sh """
                      docker-compose --env-file cycle/master.env -f cycle/docker-compose.yaml build --pull develop-env-community
                    """
                  }
                }
              }
              script {
                docker.withRegistry("", registryCredential) {
                  sh """
                    docker-compose --env-file cycle/master.env -f cycle/docker-compose.yaml push develop-env-community
                  """
                }
              }
            }
        }
        stage("Build/push develop - community") {
          when {
              expression { return params.build_develop }
          }
            steps {
              withEnv(["HOME=${env.WORKSPACE}"]) {
                script {
                  docker.withRegistry("", registryCredential) {
                    sh """
                      docker-compose --env-file cycle/develop.env -f cycle/docker-compose.yaml build --pull develop-env-community
                    """
                  }
                }
              }
              script {
                docker.withRegistry("", registryCredential) {
                  sh """
                    docker-compose --env-file cycle/develop.env -f cycle/docker-compose.yaml push develop-env-community
                  """
                }
              }
            }
        }
        stage("Build/push cycle - community") {
          when {
              expression { return params.build_cycle }
          }
            steps {
              withEnv(["HOME=${env.WORKSPACE}"]) {
                script {
                  docker.withRegistry("", registryCredential) {
                    sh """
                      docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build --pull develop-env-community
                    """
                  }
                }
              }
              script {
                docker.withRegistry("", registryCredential) {
                  sh """
                    docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml push develop-env-community
                  """
                }
              }
            }
        }
        stage("Build/push master - private") {
          when {
              expression { return params.build_master }
          }
            steps {
              withEnv(["HOME=${env.WORKSPACE}"]) {
                script {
                  docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
                    sh """
                      docker-compose --env-file cycle/master.env -f cycle/docker-compose.yaml build --pull develop-env-private
                    """
                  }
                }
              }
              script {
                docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
                  sh """
                    docker-compose --env-file cycle/master.env -f cycle/docker-compose.yaml push develop-env-private
                  """
                }
              }
            }
        }
        stage("Build/push develop - private") {
          when {
              expression { return params.build_develop }
          }
            steps {
              withEnv(["HOME=${env.WORKSPACE}"]) {
                script {
                  docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
                    sh """
                      docker-compose --env-file cycle/develop.env -f cycle/docker-compose.yaml build --pull develop-env-private
                    """
                  }
                }
              }
              script {
                docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
                  sh """
                    docker-compose --env-file cycle/develop.env -f cycle/docker-compose.yaml push develop-env-private
                  """
                }
              }
            }
        }
        stage("Build/push cycle - private") {
          when {
              expression { return params.build_cycle }
          }
            steps {
              withEnv(["HOME=${env.WORKSPACE}"]) {
                script {
                  docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
                    sh """
                      docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build --pull develop-env-private
                    """
                  }
                }
              }
              script {
                docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
                  sh """
                    docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml push develop-env-private
                  """
                }
              }
            }
        }
    }
    post {
        always {
            step([$class: 'Mailer',
                notifyEveryUnstableBuild: false,
                recipients: "tribeiro@lsst.org",
                sendToIndividuals: true])
        }
        cleanup {
            sh """
                docker network rm \${build_network}
            """
        }
    }
}
