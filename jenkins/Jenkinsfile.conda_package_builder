pipeline {
    agent {
        label 'CSC_Conda_Node'
    }

    parameters {
        booleanParam defaultValue: false, description: "Build/push conda_package_builder image?", name: 'build_conda_package_builder'
    }

     environment {
        registryCredential = "dockerhub-lssttsadmin"
    }

    stages {
        stage("Copy credentials"){
          steps{
            withCredentials([file(credentialsId: 'yum-nexus-private', variable: 'yum_nexus_private')]) {
              sh "umask 002 && cp \$yum_nexus_private ${env.WORKSPACE}/build/common/"
            }
          }
        }
        stage ('Build and Push Conda Package Builder amd64 image') {
            when {
                expression { params.build_conda_package_builder }
            }
            steps {
                script {
                    docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
                        sh """
                            source cycle/cycle.env
                            docker compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build conda-builder-private
                            docker push ts-dockerhub.lsst.org/conda_package_builder:\${CYCLE}\${rev}
                            docker tag ts-dockerhub.lsst.org/conda_package_builder:\${CYCLE}\${rev} ts-dockerhub.lsst.org/conda_package_builder:latest
                            docker push ts-dockerhub.lsst.org/conda_package_builder:latest
                        """
                    }
                }
            }
        }
    }
    post {
        always {
            step([$class: 'Mailer',
                notifyEveryUnstableBuild: false,
                recipients: "wvanreeven@lsst.org",
                sendToIndividuals: true])
        }
        regression {
            script {
                def userId = "URY8ACN4S"
                slackSend(color: "danger", message: "<@$userId> ${JOB_NAME} has suffered a regression ${BUILD_URL}", channel: "#jenkins-builds, @$userId")
            }

        }
        fixed {
            script {
                def userId = "URY8ACN4S"
                slackSend(color: "good", message: "<@$userId> ${JOB_NAME} has been fixed ${BUILD_URL}", channel: "#jenkins-builds, @$userId")
            }
        }
    }
}
