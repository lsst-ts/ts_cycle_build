pipeline{
    agent{
      label 'Node3_4CPU'
    }

    parameters {
      booleanParam defaultValue: false, description: "Build/push sal-sciplat-lab recommended image?", name: 'build_sciplat_lab_recommended'
    }

    environment {
        registryCredential = "dockerhub-lssttsadmin"
    }

    stages{

      stage ('Cloning Repos') {
          steps {
              dir(env.WORKSPACE + '/nublado') {
                  git branch: 'main', url: 'https://github.com/lsst-sqre/sciplat-lab.git'
              }
          }
      }

      stage ('Build Sal Sciplat Lab licensed-edition recommended image for TTS') {
        when {
          expression { params.build_sciplat_lab_recommended }
        }
        steps {
          script{
            docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
              sh """
                source cycle/cycle.env
                cd nublado/
                make build supplementary="" tag=\${stack}_\${CYCLE}\${rev} input=ts-dockerhub.lsst.org/sal-sciplat: image=ts-dockerhub.lsst.org/sal-sciplat-lab
                docker tag ts-dockerhub.lsst.org/sal-sciplat-lab:\${stack}_\${CYCLE}\${rev} ts-dockerhub.lsst.org/sal-sciplat-lab:recommended_\${CYCLE}
                docker push ts-dockerhub.lsst.org/sal-sciplat-lab:\${stack}_\${CYCLE}\${rev}
                docker push ts-dockerhub.lsst.org/sal-sciplat-lab:recommended_\${CYCLE}
              """
            }
          }
        }
      }

      stage ('Build Sal Sciplat Lab licensed-edition daily image') {
        when {
          expression { params.build_sciplat_lab_recommended == false }
        }
        steps {
          script{
            docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
              sh """
                source cycle/cycle.env
                cd nublado/
                make build supplementary="" tag=d_latest_\${CYCLE}\${rev} input=ts-dockerhub.lsst.org/sal-sciplat: image=ts-dockerhub.lsst.org/sal-sciplat-lab
                EUPS_TAG=\$(docker run ts-dockerhub.lsst.org/sal-sciplat:d_latest_\${CYCLE}\${rev} /bin/bash -c /opt/lsst/sal/print_stack_version.sh)
                docker tag ts-dockerhub.lsst.org/sal-sciplat-lab:d_latest_\${CYCLE}\${rev} ts-dockerhub.lsst.org/sal-sciplat-lab:\${EUPS_TAG}_\${CYCLE}\${rev}
                docker push ts-dockerhub.lsst.org/sal-sciplat-lab:d_latest_\${CYCLE}\${rev}
                docker push ts-dockerhub.lsst.org/sal-sciplat-lab:\${EUPS_TAG}_\${CYCLE}\${rev}
              """
            }
          }
        }
      }

      stage ('Build Sal Sciplat Lab licensed-edition weekly image') {
        when {
          expression { params.build_sciplat_lab_recommended == false }
        }
        steps {
          script{
            docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
              sh """
                source cycle/cycle.env
                cd nublado/
                make build supplementary="" tag=w_latest_\${CYCLE}\${rev} input=ts-dockerhub.lsst.org/sal-sciplat: image=ts-dockerhub.lsst.org/sal-sciplat-lab
                EUPS_TAG=\$(docker run ts-dockerhub.lsst.org/sal-sciplat:w_latest_\${CYCLE}\${rev} /bin/bash -c /opt/lsst/sal/print_stack_version.sh)
                docker tag ts-dockerhub.lsst.org/sal-sciplat-lab:w_latest_\${CYCLE}\${rev} ts-dockerhub.lsst.org/sal-sciplat-lab:\${EUPS_TAG}_\${CYCLE}\${rev}
                docker push ts-dockerhub.lsst.org/sal-sciplat-lab:w_latest_\${CYCLE}\${rev}
                docker push ts-dockerhub.lsst.org/sal-sciplat-lab:\${EUPS_TAG}_\${CYCLE}\${rev}
              """
            }
          }
        }
      }
    }
    post{
        regression {
            script {
                def userId = "U07N2QKCTJP"
                slackSend(color: "danger", message: "<@$userId> ${JOB_NAME} has suffered a regression ${BUILD_URL}", channel: "#jenkins-builds")
            }

        }
        fixed {
            script {
                def userId = "U07N2QKCTJP"
                slackSend(color: "good", message: "<@$userId> ${JOB_NAME} has been fixed ${BUILD_URL}", channel: "#jenkins-builds")
            }
        }
       cleanup {
            deleteDir()
        }
    }
}
