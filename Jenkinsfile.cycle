#!/usr/bin/env groovy

pipeline {

  options {
    buildDiscarder(
      logRotator(
        artifactDaysToKeepStr: '',
        artifactNumToKeepStr: '',
        daysToKeepStr: '14',
        numToKeepStr: '10'
      ))
    disableConcurrentBuilds()
  }

  agent {
    docker {
      alwaysPull true
      label 'Node3_4CPU'
      image 'docker/compose:latest'
      // registryUrl 'https://ts-dockerhub.lsst.org/'
      // registryCredentialsId 'nexus3-lsst_jenkins'
      args "--entrypoint='' --user root -v /var/run/docker.sock:/var/run/docker.sock -e DOCKER_HOST -e DOCKER_CLIENT_TIMEOUT=240 -e COMPOSE_HTTP_TIMEOUT=240"
    }
  }

  environment {
    registryCredential = "dockerhub-lssttsadmin"
    pub_registryCredential = "dockerhub-lssttsadmin"
    CONDA_PACKAGES = "ataos atdome atdometrajectory athexapod atmcs_sim atmonochromator atpneumatics_sim atspectrograph atwhitelight authorize dimm dmocps dsm electrometer ess fiberspectrograph genericcamera gis headerservice hvac integrationtests lasertracker love-commander love-csc love-frontend love-manager love-manager-static love-producer love-view-backup mtaircompressor mthexapod mtdome mtdometrajectory mtm2_sim mtmount mtrotator ospl-daemon pmd salkafka scheduler schedview test watcher weatherforecast"
    CONDA_PACKAGES_C = "ataos_c atdome_c atdometrajectory_c athexapod_c atmcs_sim_c atmonochromator_c atpneumatics_sim_c atspectrograph_c atwhitelight_c authorize_c dimm_c dmocps_c dsm_c electrometer_c ess_c fiberspectrograph_c genericcamera_c gis_c headerservice_c hvac_c integrationtests_c lasertracker_c love-commander_c love-csc_c love-frontend_c love-manager_c love-manager-static_c love-producer_c love-view-backup_c mtaircompressor_c mthexapod_c mtdome_c mtdometrajectory_c mtm2_sim_c mtmount_c mtrotator_c pmd_c salkafka_c scheduler_c schedview_c test_c watcher_c weatherforecast_c"
    CAMSPEC_GENCAM = "genericcamera-canon genericcamera-vimba"
    CAMSPEC_GENCAM_C = "genericcamera-canon_c genericcamera-vimba_c"
  }
  parameters {
      booleanParam defaultValue: false, description: "Build/push Conda Package Builder arm64 and aarch64 images.", name: 'build_conda_package_builder_arm'
      booleanParam defaultValue: false, description: "Build/push Conda Package Builder x86 images.", name: 'build_conda_package_builder_x86'
      booleanParam defaultValue: false, description: "Build/push base deployment image (only run this if you are building revision 0).", name: 'deploy_conda'
      booleanParam defaultValue: false, description: "Build/push lsstsqre deployment image (only run this if you are building revision 0 or updating the DM stack version).", name: 'deploy_lsstsqre'
      booleanParam defaultValue: false, description: "Build/push ts-cycle conda package.", name: 'ts_cycle'
      booleanParam defaultValue: false, description: "Build/push all components based on base deployment image.", name: 'base_components'
      choice(name: 'component', choices: ["ALL", "ataos", "atdome", "atdometrajectory", "athexapod", "atmcs_sim", "atmonochromator", "atpneumatics_sim", "atspectrograph", "atwhitelight", "authorize", "dimm", "dmocps", "dsm", "electrometer", "ess", "fiberspectrograph", "genericcamera", "gis", "headerservice", "hvac", "integrationtests", "genericcamera", "lasertracker", "love-commander", "love-csc", "love-frontend", "love-frontend-k8s", "love-manager", "love-manager-static", "love-producer", "love-view-backup", "mtaircompressor", "mthexapod", "mtdome", "mtdometrajectory", "mtm2_sim", "mtmount", "mtrotator", "ospl-daemon", "pmd", "salkafka", "scheduler", "schedview", "test", "watcher", "weatherforecast"], description: "Select one component to build. Building all components is only allowed when building revision 0.")
      booleanParam defaultValue: false, description: "Build/push ESS Controller image.", name: 'build_ess_controller'
      booleanParam defaultValue: false, description: "Build/push camera-specific GenericCamera images.", name: 'build_camspec_gencam'
      booleanParam defaultValue: false, description: "Build/push M1M3 simulator image.", name: 'build_m1m3_sim'
      booleanParam defaultValue: false, description: "Build/push pointing component deployment image.", name: 'build_ptg'
      booleanParam defaultValue: false, description: "Build/push MTAOS image.", name: 'build_mtaos'
      booleanParam defaultValue: false, description: "Build/push OODS image.", name: 'build_oods'
      booleanParam defaultValue: false, description: "Build/push scriptqueue image.", name: 'build_scriptqueue'
      booleanParam defaultValue: false, description: "Build/push sal-sciplat recommended image? This adds Telescope and Site layer to a lsstsqre/centos image in prepartion for building nublado images.", name: 'build_sciplat'
      booleanParam defaultValue: false, description: "Build/push sal-sciplat-lab recommended image? Adds SQuaRe layer to sal-sciplat to produce a nublado-ready image.", name: 'build_sciplat_lab_recommended'
      booleanParam defaultValue: false, description: "Build/push RubinTV Rapid Analysis.", name: 'rapid_analysis'
      booleanParam defaultValue: false, description: "Build/push development image.", name: 'develop_env'
  }

  stages {
    stage ('Build Conda Package Builder ARM images') {
      when {
          expression { params.build_conda_package_builder_arm }
      }
      steps {
          build job: "CondaPackageBuilder_amd64/" + env.BRANCH_NAME.replace("/", "%2F"), parameters: [booleanParam(name: 'build_conda_package_builder', value: true)], wait: false
          build job: "CondaPackageBuilder_aarch64/" + env.BRANCH_NAME.replace("/", "%2F"), parameters: [booleanParam(name: 'build_conda_package_builder_aarch64', value: true)], wait: false
      }
    }
    stage ('Build Conda Package Builder x86 images') {
      when {
          expression { params.build_conda_package_builder_x86 }
      }
      steps {

        withCredentials([file(credentialsId: 'yum-nexus-private', variable: 'yum_nexus_private')]) {
          sh "cp \$yum_nexus_private ${env.WORKSPACE}/build/common/"
        }

        withEnv(["HOME=${env.WORKSPACE}"]) {
          sh """
          docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build conda-builder-private
          """
        }

        script {
          docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
            sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml push conda-builder-private
              source cycle/cycle.env
              docker tag ts-dockerhub.lsst.org/conda_package_builder:\${CYCLE}\${rev} ts-dockerhub.lsst.org/conda_package_builder
              docker push ts-dockerhub.lsst.org/conda_package_builder
            """
          }
        }

      }
    }
    stage ('Build deploy-conda-private') {
      when {
          expression { params.deploy_conda }
      }
      steps {

        withEnv(["HOME=${env.WORKSPACE}"]) {
          sh """
          export \$(cat cycle/cycle.env | grep rev | sed  's/#.*//g' | xargs)
          export \$(cat cycle/cycle.env | grep CYCLE | sed  's/#.*//g' | xargs)
          if [ "\$rev" != ".000" ]; then echo "FAILED: base conda image can only be built when building revision 0."; exit 1; else echo "BUILDING CYCLE \${CYCLE}\${rev}";fi
          """
        }

        withCredentials([file(credentialsId: 'yum-nexus-private', variable: 'yum_nexus_private')]) {
          sh "cp \$yum_nexus_private ${env.WORKSPACE}/build/common/"
        }

      // When using the docker container, we need to change
      // the HOME path to WORKSPACE to have the authority
      // to install the packages.
        withEnv(["HOME=${env.WORKSPACE}"]) {
          sh """
          docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build deploy-conda-private
          """
        }

        script {
          docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
            sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml push deploy-conda-private
            """
          }
        }
      }
    }
    stage ('Build deploy-lsstsqre-private') {
      when {
          expression { params.deploy_lsstsqre }
      }
      steps {

        withCredentials([file(credentialsId: 'yum-nexus-private', variable: 'yum_nexus_private')]) {
          sh "cp \$yum_nexus_private ${env.WORKSPACE}/build/common/"
        }
        withEnv(["HOME=${env.WORKSPACE}"]) {
          sh """
          docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build deploy-lsstsqre-private deploy-lsstsqre-private_c
          """
        }

        script {
          docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
            sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml push deploy-lsstsqre-private deploy-lsstsqre-private_c
            """
          }
        }
      }
    }
    stage ('Build ts-cycle conda package') {
      when {
          expression { params.ts_cycle }
      }
      steps {
          build job: "Cycle_conda_package/" + env.BRANCH_NAME.replace("/", "%2F"), wait: false
      }
    }
    stage ('Build ALL base components') {
      when {
        allOf {
          expression { params.base_components }
          expression { params.component.equals("ALL")}
        }
      }
      steps {

        withEnv(["HOME=${env.WORKSPACE}"]) {
          sh """
          export \$(cat cycle/cycle.env | grep rev | sed  's/#.*//g' | xargs)
          export \$(cat cycle/cycle.env | grep CYCLE | sed  's/#.*//g' | xargs)
          if [ "\$rev" != ".000" ]; then echo "FAILED: Building ALL components only allowed when building revision 0."; exit 1 ; else echo "BUILDING CYCLE \${CYCLE}\${rev}";fi
          """
        }

        script{
          withEnv(["HOME=${env.WORKSPACE}"]) {
            docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
              sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build \${CONDA_PACKAGES} \${CONDA_PACKAGES_C}
              """
              }
          }
        }
        script {
          docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
            sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml push \${CONDA_PACKAGES} \${CONDA_PACKAGES_C}
            """
          }
        }
      }
    }
    stage ('Build single base component') {
      when {
        allOf {
          expression { params.base_components }
          not{ expression { params.component.equals("ALL") } }
        }
      }
      steps {
        script{
          withEnv(["HOME=${env.WORKSPACE}"]) {
            docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
              sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build ${params.component} ${params.component}_c
              """
              }
          }
        }
        script {
          docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
            sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml push ${params.component} ${params.component}_c
            """
          }
        }
      }
    }
    stage ('Build ESS Controller Docker image') {
      when {
          expression { params.build_ess_controller }
      }
      steps {
          build job: "EssController/" + env.BRANCH_NAME.replace("/", "%2F"), parameters: [booleanParam(name: 'build_ess_controller', value: true)], wait: false
      }
    }
    stage ('Build camera specific GenericCamera Docker images') {
      when {
          expression { params.build_camspec_gencam }
      }
      steps {
        withCredentials([file(credentialsId: 'nexus-netrc', variable: 'nexus_netrc')]) {
            sh "cp \$nexus_netrc ${env.WORKSPACE}/build/common/"
        }
        script{
          withEnv(["HOME=${env.WORKSPACE}"]) {
            docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
              sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build \${CAMSPEC_GENCAM} \${CAMSPEC_GENCAM_C}
              """
              }
          }
        }
        script {
          docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
            sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml push \${CAMSPEC_GENCAM} \${CAMSPEC_GENCAM_C}
            """
          }
        }
      }
    }
    stage ('Build M1M3 simulator') {
      when {
          expression { params.build_m1m3_sim }
      }
      steps {

        script{
          withEnv(["HOME=${env.WORKSPACE}"]) {
            docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
              sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build mtm1m3_sim mtm1m3_sim_c
              """
              }
          }
        }
        script {
          docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
            sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml push mtm1m3_sim mtm1m3_sim_c
            """
          }
        }
      }
    }
    stage ('Build PTG') {
      when {
          expression { params.build_ptg }
      }
      steps {

        script{
          withCredentials([sshUserPrivateKey(credentialsId: 'RubinObsWorkerSSHKey', keyFileVariable: 'github_cred')]) {
            sh "cp \$github_cred ${env.WORKSPACE}/build/ptg/id_rsa"
          }
          withEnv(["HOME=${env.WORKSPACE}"]) {
            docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
              sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build ptg ptg_c
              """
              }
          }
        }
        script {
          docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
            sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml push ptg ptg_c
            """
          }
        }
      }
    }
    stage ('Build mtaos') {
      when {
          expression { params.build_mtaos }
      }
      steps {

        script{
          withEnv(["HOME=${env.WORKSPACE}"]) {
            docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
              sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build mtaos mtaos_c
              """
              }
          }
        }
        script {
          docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
            sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml push mtaos mtaos_c
            """
          }
        }
      }
    }
    stage ('Build oods') {
      when {
        expression { params.build_oods }
      }
      steps {
        script {
          withEnv(["HOME=${env.WORKSPACE}"]) {
            docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
              sh"""
              docker compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build oods oods_c atoods atoods_c ccoods ccoods_c mtoods mtoods_c
              """
            }
          }
        }
        script {
          withEnv(["HOME=${env.WORKSPACE}"]) {
            docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
              sh"""
              docker compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml push oods oods_c atoods atoods_c ccoods ccoods_c mtoods mtoods_c
              """
            }
          }
        }
      }
    }
    stage ('Build scriptqueue') {
      when {
          expression { params.build_scriptqueue }
      }
      steps {

        script{
          withEnv(["HOME=${env.WORKSPACE}"]) {
            docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
              sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build scriptqueue scriptqueue_c
              """
              }
          }
        }
        script {
          docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
            sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml push scriptqueue scriptqueue_c
            """
          }
        }
      }
    }
    stage ('Build Sal Sciplat (pre-nublado) recommended image') {
      when {
          expression { params.build_sciplat }
      }
      steps {

        script{
          withEnv(["HOME=${env.WORKSPACE}"]) {
            sh """
            docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build opensplice-lsstsqre-community
            docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build sal-sciplat-community
            """
          }
        }

        script {
          docker.withRegistry("", pub_registryCredential) {
            sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml push sal-sciplat-community
            """
          }
        }

        withCredentials([file(credentialsId: 'yum-nexus-private', variable: 'yum_nexus_private')]) {
          sh "cp \$yum_nexus_private ${env.WORKSPACE}/build/common/"
        }

        script{
          withEnv(["HOME=${env.WORKSPACE}"]) {
            sh """
            docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build opensplice-lsstsqre-licensed
            docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build sal-sciplat-licensed
            """
          }
        }

        script {
          docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
            sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml push sal-sciplat-licensed
            """
          }
        }
      }
    }
    stage ('Build Sal Sciplat Lab (nublado) recommended image') {
      when {
          expression { params.build_sciplat_lab_recommended }
      }
      steps {
          build job: "SalSciplatLab/" + env.BRANCH_NAME.replace("/", "%2F"), parameters: [booleanParam(name: 'build_sciplat_lab_recommended', value: true)], wait: false
      }
    }
    stage ('Build RubinTV Rapid Analysis') {
      when {
          expression { params.rapid_analysis }
      }
      steps {

        script{
          withEnv(["HOME=${env.WORKSPACE}"]) {
            sh """
            docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build rapid-analysis rapid-analysis_c rapid-analysis-usdf rapid-analysis-usdf_c
            """
          }
        }
        script {
          docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
            sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml push rapid-analysis rapid-analysis_c
            """
          }
        }
        script {
          docker.withRegistry("", pub_registryCredential) {
            sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml push rapid-analysis-usdf rapid-analysis-usdf_c
            """
          }
        }
      }
    }
    stage ('Build development image') {
      when {
          expression { params.develop_env }
      }
      steps {
        withCredentials([file(credentialsId: 'yum-nexus-private', variable: 'yum_nexus_private')]) {
          sh "cp \$yum_nexus_private ${env.WORKSPACE}/build/common/"
        }
        script {
          docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
            sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build --pull base-sqre-private
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml push base-sqre-private

              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build --pull salobj-private
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml push salobj-private

              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build --pull develop-env-private
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml push develop-env-private
            """
          }
        }
      }
    }
  }
}
