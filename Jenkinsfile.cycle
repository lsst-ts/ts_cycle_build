#!/usr/bin/env groovy

pipeline {

  options {
    buildDiscarder(
      logRotator(
        artifactDaysToKeepStr: '',
        artifactNumToKeepStr: '',
        daysToKeepStr: '14',
        numToKeepStr: '10'
      ))
    disableConcurrentBuilds()
  }

  agent {
    docker {
      alwaysPull true
      label 'Node3_4CPU'
      image 'docker/compose:latest'
      // registryUrl 'https://ts-dockerhub.lsst.org/'
      // registryCredentialsId 'nexus3-lsst_jenkins'
      args "--entrypoint='' --user root -v /var/run/docker.sock:/var/run/docker.sock -e DOCKER_HOST -e DOCKER_CLIENT_TIMEOUT=240 -e COMPOSE_HTTP_TIMEOUT=240"
    }
  }

  environment {
    registryCredential = "dockerhub-lssttsadmin"
    pub_registryCredential = "dockerhub-lssttsadmin"
    CONDA_PACKAGES = "adam-sensors ataos atdome atdometrajectory athexapod atmcs_sim atpneumatics_sim atspectrograph dimm dmocps dsm love-commander love-producer mthexapod mtdome mtdometrajectory mtm2_sim mtmount mtrotator ospl-daemon salkafka watcher weatherstation"
    CONDA_PACKAGES_C = "adam-sensors_c ataos_c atdome_c atdometrajectory_c athexapod_c atmcs_sim_c atpneumatics_sim_c atspectrograph_c dimm_c love-commander_c love-producer_c dmocps_c dsm_c mthexapod_c mtdome_c mtdometrajectory_c mtm2_sim_c mtmount_c mtrotator_c salkafka_c watcher_c weatherstation_c"
  }
  parameters {
      booleanParam defaultValue: false, description: "Build/push base deployment image.", name: 'deploy_conda'
      booleanParam defaultValue: false, description: "Build/push lsstsqre deployment image.", name: 'deploy_lsstsqre'
      booleanParam defaultValue: false, description: "Build/push all components based on base deployment image.", name: 'base_components'
      choice(name: 'component', choices: ["ALL", "adam-sensors", "ataos", "atdome", "atdometrajectory", "athexapod", "atmcs_sim", "atpneumatics_sim", "atspectrograph", "dimm", "dmocps", "dsm", "love-commander", "love-producer", "mthexapod", "mtdome", "mtdometrajectory", "mtm2_sim", "mtmount", "mtrotator", "ospl-daemon", "salkafka", "watcher", "weatherstation"], description: "Select one component to build.")
      booleanParam defaultValue: false, description: "Build/push M1M3 simulator image.", name: 'build_m1m3_sim'
      booleanParam defaultValue: false, description: "Build/push pointing component deployment image.", name: 'build_ptg'
      booleanParam defaultValue: false, description: "Build/push lsst_sims image.", name: 'build_lsst_sims'
      booleanParam defaultValue: false, description: "Build/push MTAOS image.", name: 'build_mtaos'
      booleanParam defaultValue: false, description: "Build/push scriptqueue image.", name: 'build_scriptqueue'
      booleanParam defaultValue: false, description: "Build/push scheduler image.", name: 'build_scheduler'
      booleanParam defaultValue: false, description: "Build/push sal-sciplat recommended image?", name: 'build_sciplat'
      booleanParam defaultValue: false, description: "Build/push sal-sciplat-lab recommended image for NTS?", name: 'build_sciplat_lab_nts'
      booleanParam defaultValue: false, description: "Build/push sal-sciplat-lab recommended image for summit?", name: 'build_sciplat_lab_summit'
      booleanParam defaultValue: false, description: "Build/push sal-sciplat-lab recommended image for Base (BTS)?", name: 'build_sciplat_lab_bts'
  }

  stages {
    stage ('Build deploy-conda-private') {
      when {
          expression { params.deploy_conda }
      }
      steps {

        withCredentials([file(credentialsId: 'yum-nexus-private', variable: 'yum_nexus_private')]) {
          sh "cp \$yum_nexus_private ${env.WORKSPACE}/build/common/"
        }

      // When using the docker container, we need to change
      // the HOME path to WORKSPACE to have the authority
      // to install the packages.
        withEnv(["HOME=${env.WORKSPACE}"]) {
          sh """
          docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build deploy-conda-private
          """
        }

        script {
          docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
            sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml push deploy-conda-private
            """
          }
        }
      }
    }
    stage ('Build deploy-lsstsqre-private') {
      when {
          expression { params.deploy_lsstsqre }
      }
      steps {

        withCredentials([file(credentialsId: 'yum-nexus-private', variable: 'yum_nexus_private')]) {
          sh "cp \$yum_nexus_private ${env.WORKSPACE}/build/common/"
        }
        withEnv(["HOME=${env.WORKSPACE}"]) {
          sh """
          docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build deploy-lsstsqre-private
          """
        }

        script {
          docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
            sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml push deploy-lsstsqre-private
            """
          }
        }
      }
    }
    stage ('Build ALL base components') {
      when {
        allOf {
          expression { params.base_components }
          expression { params.component.equals("ALL")}
        }
      }
      steps {

        script{
          withEnv(["HOME=${env.WORKSPACE}"]) {
            docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
              sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build \${CONDA_PACKAGES} \${CONDA_PACKAGES_C}
              """
              }
          }
        }
        script {
          docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
            sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml push \${CONDA_PACKAGES} \${CONDA_PACKAGES_C}
            """
          }
        }
      }
    }
    stage ('Build single base component') {
      when {
        allOf {
          expression { params.base_components }
          not{ expression { params.component.equals("ALL") } }
        }
      }
      steps {
        script{
          withEnv(["HOME=${env.WORKSPACE}"]) {
            docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
              sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build ${params.component} ${params.component}_c
              """
              }
          }
        }
        script {
          docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
            sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml push ${params.component} ${params.component}_c
            """
          }
        }
      }
    }
    stage ('Build M1M3 simulator') {
      when {
          expression { params.build_m1m3_sim }
      }
      steps {

        script{
          withEnv(["HOME=${env.WORKSPACE}"]) {
            docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
              sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build mtm1m3_sim mtm1m3_sim_c
              """
              }
          }
        }
        script {
          docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
            sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml push mtm1m3_sim mtm1m3_sim_c
            """
          }
        }
      }
    }
    stage ('Build PTG') {
      when {
          expression { params.build_ptg }
      }
      steps {

        script{
          withCredentials([sshUserPrivateKey(credentialsId: 'RubinObsWorkerSSHKey', keyFileVariable: 'github_cred')]) {
            sh "cp \$github_cred ${env.WORKSPACE}/build/ptg/id_rsa"
          }
          withEnv(["HOME=${env.WORKSPACE}"]) {
            docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
              sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build ptg ptg_c
              """
              }
          }
        }
        script {
          docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
            sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml push ptg ptg_c
            """
          }
        }
      }
    }
    stage ('Build lsst_sims') {
      when {
          expression { params.build_lsst_sims }
      }
      steps {

        script{
          withEnv(["HOME=${env.WORKSPACE}"]) {
            docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
              sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build lsst_sims lsst_sims_c
              """
              }
          }
        }
        script {
          docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
            sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml push lsst_sims lsst_sims_c
            """
          }
        }
      }
    }
    stage ('Build mtaos') {
      when {
          expression { params.build_mtaos }
      }
      steps {

        script{
          withEnv(["HOME=${env.WORKSPACE}"]) {
            docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
              sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build mtaos mtaos_c
              """
              }
          }
        }
        script {
          docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
            sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml push mtaos mtaos_c
            """
          }
        }
      }
    }
    stage ('Build scriptqueue') {
      when {
          expression { params.build_scriptqueue }
      }
      steps {

        script{
          withEnv(["HOME=${env.WORKSPACE}"]) {
            docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
              sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build scriptqueue scriptqueue_c
              """
              }
          }
        }
        script {
          docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
            sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml push scriptqueue scriptqueue_c
            """
          }
        }
      }
    }
    stage ('Build scheduler') {
      when {
          expression { params.build_scheduler }
      }
      steps {

        script{
          withEnv(["HOME=${env.WORKSPACE}"]) {
            docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
              sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build scheduler scheduler_c
              """
              }
          }
        }
        script {
          docker.withRegistry("https://ts-dockerhub.lsst.org/", "nexus3-lsst_jenkins") {
            sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml push scheduler scheduler_c
            """
          }
        }
      }
    }
    stage ('Build Sal Sciplat (nublado) recommended image') {
      when {
          expression { params.build_sciplat }
      }
      steps {

        script{
          withEnv(["HOME=${env.WORKSPACE}"]) {
            sh """
            docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml build sal-sciplat
            """
          }
        }
        script {
          docker.withRegistry("", pub_registryCredential) {
            sh """
              docker-compose --env-file cycle/cycle.env -f cycle/docker-compose.yaml push sal-sciplat
            """
          }
        }
      }
    }
    stage ('Build Sal Sciplat Lab recommended image for NTS') {
      when {
          expression { params.build_sciplat_lab_nts }
      }
      steps {
          build job: 'SalSciplatLab', parameters: [booleanParam(name: 'build_sciplat_lab_nts', value: true)], wait: false
      }
    }
    stage ('Build Sal Sciplat Lab recommended image for Base (BTS)') {
      when {
          expression { params.build_sciplat_lab_bts }
      }
      steps {
          build job: 'SalSciplatLab', parameters: [booleanParam(name: 'build_sciplat_lab_bts', value: true)], wait: false
      }
    }
    stage ('Build Sal Sciplat Lab recommended image for Summit') {
      when {
          expression { params.build_sciplat_lab_summit }
      }
      steps {
          build job: 'SalSciplatLab', parameters: [booleanParam(name: 'build_sciplat_lab_summit', value: true)], wait: false
      }
    }
  }
}
